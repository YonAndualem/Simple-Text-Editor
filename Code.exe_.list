EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Code.exe_ -- emu8086 assembler version: 4.08  
 
[ 5/27/2025  --  9:09:52 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;Text Editor, By Kevin Chen, 23365285
[   2]        :                                       
[   3]        :                                       TITLE PGM: SCREEN EDITOR
[   4]        :                                       .MODEL SMALL
[   5]        :                                       .STACK 100H
[   6]        :                                       .DATA
[   7]    0100: 0A 0D 24                              new_line db 0ah,0dh,"$"
[   8]    0103: 20 20 20 20 20 20 20 20 20 20 20 20   title_str db "                            Kevin Chen's Text Editor","$"
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 4B 65 76 69 6E 20 43 68 
                65 6E 27 73 20 54 65 78 74 20 45 64 
                69 74 6F 72 24                      
[   9]    0138: 49 6E 73 65 72 74 20 4B 65 79 3A 20   Bottom_str db "Insert Key: Replace Function, CTRL + B: Box Function, Arrow: Move, ESC: Saves","$"
                52 65 70 6C 61 63 65 20 46 75 6E 63 
                74 69 6F 6E 2C 20 43 54 52 4C 20 2B 
                20 42 3A 20 42 6F 78 20 46 75 6E 63 
                74 69 6F 6E 2C 20 41 72 72 6F 77 3A 
                20 4D 6F 76 65 2C 20 45 53 43 3A 20 
                53 61 76 65 73 24                   
[  10]    0186: 01                                    ins_flag db 1
[  11]    0187: 00                                    box_flag db 0
[  12]    0188: 00 00                                 PosX    dw 0
[  13]    018A: 00 00                                 PosY    dw 0
[  14]    018C: 00 00                                 handle  dw ?
[  15]    018E: 00 00 00 00 00 00 00 00 00 00 00 00   filename db 25 DUP(?)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00                                  
[  16]    01A7: 20 20 20 20 20 20 20 20 20 20 20 20   text    db  1600 DUP(' ')        ;25 lines each having length 80 chars
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20                         
[  17]        :                                       
[  18]        :                                       ;--------------------------------------------
[  19]        :                                       .CODE
[  20]        :                                       
[  21]    07F0:                                       MAIN PROC
[  22]    07F0: B8 10 00                              MOV AX,@DATA
[  23]    07F3: 8E D8                                 MOV DS,AX
[  24]        :                                       ;------ Read File Name from CMD Argument ------
[  25]    07F5: BE 82 00                              MOV SI,82h
[  26]    07F8: BF 8E 00                              LEA DI,filename
[  27]    07FB:                                       READ:
[  28]    07FB: 26 8A 04                              MOV AL,ES:[SI]
[  29]    07FE: 3C 0D                                 CMP AL,0Dh
[  30]    0800: 74 06                                 JE ENDR
[  31]    0802: 88 05                                 MOV [DI],AL
[  32]    0804: 46                                    INC SI
[  33]    0805: 47                                    INC DI
[  34]    0806: EB F3                                 JMP READ
[  35]    0808:                                       ENDR:
[  36]        :                                       ;MOV [DI],0
[  37]        :                                       ;================= Read Data From File =================
[  38]    0808: B4 3D                                 mov AH,3Dh          ; 3Dh of DOS Services opens a file.
[  39]    080A: B0 02                                 mov AL,2            ; 0 - for reading. 1 - for writing. 2 - both
[  40]    080C: BA 8E 00                              LEA DX,filename     ; make a pointer to the filename
[  41]    080F: CD 21                                 int 21h             ; call DOS
[  42]    0811: A3 8C 00                              MOV handle,AX       ; Function 3Dh returns the file handle in AX, here we save it for later use.
[  43]    0814: 73 03                                 JNC READF
[  44]    0816: E9 66 01                              JMP EXIT_MAIN
[  45]        :                                       
[  46]    0819:                                       READF:
[  47]        :                                       ;DOS Service Function number 3Fh reads from a file.
[  48]    0819: B4 3F                                 mov ah,3Fh
[  49]    081B: B9 D0 07                              mov cx,07D0H        ; I will assume ELMO.TXT has atleast 4 bytes in it. CX is how many bytes to read.
[  50]    081E: BA A7 00                              mov dx,offset text  ; DOS Functions like DX having pointers for some reason.
[  51]    0821: 8B 1E 8C 00                           mov bx,handle       ; BX needs the file handle.
[  52]    0825: CD 21                                 int 21h             ; call DOS
[  53]        :                                       
[  54]        :                                       
[  55]        :                                       
[  56]        :                                       ;================================ Editor Page =======================================
[  57]    0827:                                       SSS:  ; Text editor
[  58]        :                                       
[  59]        :                                       ; set video mode
[  60]    0827: B4 00                                 MOV AH, 0 ; set mode function
[  61]    0829: B0 03                                 MOV AL, 03h ; 25x80 text mode
[  62]    082B: CD 10                                 INT 10H ; set mode
[  63]        :                                       
[  64]        :                                       ;enable underline cursor
[  65]    082D: B4 01                                 mov ah,01H ;cursor shape
[  66]    082F: B9 07 06                              MOV CX,0607H ;underline cursor
[  67]    0832: CD 10                                 INT 10H
[  68]        :                                       
[  69]        :                                       ;============== Display Text from File =================
[  70]    0834: E8 57 03                              CALL DISP_MEM
[  71]        :                                       ;=======================================================
[  72]        :                                       ;initilize variables again
[  73]    0837: C7 06 88 00 00 00                     MOV PosX,0
[  74]    083D: C7 06 8A 00 00 00                     MOV PosY,0
[  75]        :                                       ;move cursor to upper left corner
[  76]    0843: B4 02                                 MOV AH,2h ;move cursor function.
[  77]    0845: B6 01                                 MOV DH,1
[  78]    0847: B2 00                                 MOV DL,0
[  79]    0849: B7 00                                 MOV BH,0  ;PAGE 0
[  80]    084B: CD 10                                 INT 10H ;move Cursor
[  81]        :                                       ;=======================================================
[  82]        :                                       ;get key stroke
[  83]    084D: B4 00                                 MOV AH,0    ;keyboard input function
[  84]    084F: CD 16                                 INT 16H     ;AH= scan code, AL= ASCII code
[  85]        :                                       
[  86]    0851:                                       WHILE_:
[  87]    0851: 3C 0D                                 CMP AL, 0dh ; comparing the enter key
[  88]    0853: 75 14                                 JNE Check_bks
[  89]        :                                       ;------------------ Enter Key --------------
[  90]    0855: BA 00 00                              LEA DX,new_line
[  91]    0858: B4 09                                 MOV AH,09h
[  92]    085A: CD 21                                 int 21H
[  93]    085C: FF 06 8A 00                           INC PosY
[  94]    0860: C7 06 88 00 00 00                     MOV PosX,0
[  95]    0866: E9 0C 01                              jmp NEXT_KEY
[  96]        :                                       ;----------------- Backspace key -----------
[  97]    0869:                                       Check_bks:
[  98]    0869: 3C 08                                 CMP AL,08h
[  99]    086B: 75 30                                 JNE Check_del
[ 100]    086D: E8 C1 02                              CALL UPDATE_BKS_MEM
[ 101]    0870: E8 1B 03                              CALL DISP_MEM
[ 102]    0873: A1 88 00                              MOV AX,PosX
[ 103]    0876: 3D 00 00                              CMP AX,0
[ 104]    0879: 74 06                                 JE LBKS1
[ 105]    087B: FF 0E 88 00                           DEC PosX
[ 106]    087F: EB 0A                                 JMP LBKS2
[ 107]    0881:                                       LBKS1:
[ 108]    0881: B8 4F 00                              MOV AX,79
[ 109]    0884: A3 88 00                              MOV PosX,AX
[ 110]    0887: FF 0E 8A 00                           DEC PosY
[ 111]    088B:                                       LBKS2:
[ 112]    088B: 8B 16 88 00                           MOV DX,PosX
[ 113]    088F: A1 8A 00                              MOV AX,PosY
[ 114]    0892: 8A F0                                 MOV DH,AL
[ 115]    0894: B4 02                                 MOV AH,2 ;cursor move function
[ 116]    0896: B7 00                                 MOV BH,0
[ 117]    0898: CD 10                                 INT 10H ;move cursor
[ 118]    089A: E9 D8 00                              jmp NEXT_KEY
[ 119]        :                                       
[ 120]        :                                       ;----------------- Delete key -----------
[ 121]    089D:                                       Check_del:
[ 122]    089D: 3D 00 53                              CMP AX,5300h
[ 123]    08A0: 75 30                                 JNE Check_ins
[ 124]    08A2: E8 B1 02                              CALL UPDATE_DEL_MEM
[ 125]    08A5: E8 E6 02                              CALL DISP_MEM
[ 126]    08A8: A1 88 00                              MOV AX,PosX
[ 127]    08AB: 3D 00 00                              CMP AX,0
[ 128]    08AE: 74 06                                 JE LDEL1
[ 129]    08B0: FF 0E 88 00                           DEC PosX
[ 130]    08B4: EB 0A                                 JMP LDEL2
[ 131]    08B6:                                       LDEL1:
[ 132]    08B6: B8 4F 00                              MOV AX,79
[ 133]    08B9: A3 88 00                              MOV PosX,AX
[ 134]    08BC: FF 0E 8A 00                           DEC PosY
[ 135]    08C0:                                       LDEL2:
[ 136]    08C0: 8B 16 88 00                           MOV DX,PosX
[ 137]    08C4: A1 8A 00                              MOV AX,PosY
[ 138]    08C7: 8A F0                                 MOV DH,AL
[ 139]    08C9: B4 02                                 MOV AH,2 ;cursor move function
[ 140]    08CB: B7 00                                 MOV BH,0
[ 141]    08CD: CD 10                                 INT 10H ;move cursor
[ 142]    08CF: E9 A3 00                              jmp NEXT_KEY
[ 143]        :                                       
[ 144]        :                                       ;----------------- Insert Key  ----------------
[ 145]    08D2:                                       Check_ins:
[ 146]    08D2: 3D 00 52                              CMP AX,5200h
[ 147]    08D5: 75 17                                 JNE check_ctrlb
[ 148]    08D7: A0 86 00                              MOV AL,ins_flag
[ 149]    08DA: 3C 00                                 CMP AL,0
[ 150]    08DC: 74 08                                 JE set_ins
[ 151]    08DE: B0 00                                 MOV AL,0
[ 152]    08E0: A2 86 00                              MOV ins_flag,AL
[ 153]    08E3: E9 8F 00                              JMP NEXT_KEY
[ 154]    08E6:                                       set_ins:
[ 155]    08E6: B0 01                                 MOV AL,1
[ 156]    08E8: A2 86 00                              MOV ins_flag,AL
[ 157]    08EB: E9 87 00                              JMP NEXT_KEY
[ 158]        :                                       
[ 159]        :                                       ;---------------- CTRL+B Key ------------------
[ 160]    08EE:                                       check_ctrlb:
[ 161]    08EE: 3D 02 30                              CMP AX,3002h
[ 162]    08F1: 75 15                                 JNE press
[ 163]    08F3: A0 87 00                              MOV AL,box_flag
[ 164]    08F6: 3C 00                                 CMP AL,0
[ 165]    08F8: 74 07                                 JE set_boxf
[ 166]    08FA: B0 00                                 MOV AL,0
[ 167]    08FC: A2 87 00                              MOV box_flag,AL
[ 168]    08FF: EB 74                                 JMP NEXT_KEY
[ 169]    0901:                                       set_boxf:
[ 170]    0901: B0 01                                 MOV AL,1
[ 171]    0903: A2 87 00                              MOV box_flag,AL
[ 172]    0906: EB 6D                                 JMP NEXT_KEY
[ 173]        :                                       ;----------------- function key or character key ----------
[ 174]    0908:                                       press:
[ 175]    0908: 3C 1B                                 CMP AL,1BH      ;ESC (exit character)?
[ 176]    090A: 75 02                                 JNE NESC
[ 177]    090C: EB 6E                                 JMP END_WHILE    ;yes, exit >>> line 68
[ 178]        :                                       
[ 179]    090E:                                       NESC:
[ 180]        :                                       ;if function key
[ 181]    090E: 3C 00                                 CMP AL,0        ;AL=0;
[ 182]    0910: 75 05                                 JNE ELSE_       ;no, character key
[ 183]        :                                       ;then, function key
[ 184]    0912: E8 8E 00                              CALL DO_FUNCTION ;execute function
[ 185]    0915: EB 5E                                 JMP NEXT_KEY ;get Next keystrokes
[ 186]        :                                       
[ 187]        :                                       ;------------------ Character key ------------------------
[ 188]    0917:                                       ELSE_: ;Display character
[ 189]    0917: 50                                    PUSH AX
[ 190]    0918: A0 86 00                              MOV AL,ins_flag
[ 191]    091B: 3C 00                                 CMP AL,0
[ 192]    091D: 75 25                                 JNE INS_MODE
[ 193]        :                                       ;Insert mode off
[ 194]    091F: 58                                    POP AX
[ 195]    0920: E8 CB 01                              CALL UPDATE_MEM
[ 196]    0923: B4 02                                 MOV AH,2  ;Display character func
[ 197]    0925: 8A D0                                 MOV DL,AL ;get character
[ 198]    0927: CD 21                                 INT 21H ;Display character
[ 199]    0929: 8B 1E 88 00                           MOV BX,PosX
[ 200]    092D: 83 FB 4F                              CMP BX,79
[ 201]    0930: 74 06                                 JE N_Line
[ 202]    0932: FF 06 88 00                           INC PosX
[ 203]    0936: EB 3D                                 JMP NEXT_KEY
[ 204]    0938:                                       N_Line:
[ 205]    0938: C7 06 88 00 00 00                     MOV PosX,0
[ 206]    093E: FF 06 8A 00                           INC PosY
[ 207]    0942: EB 31                                 JMP NEXT_KEY
[ 208]        :                                       
[ 209]    0944:                                       INS_MODE:
[ 210]        :                                       ;Insert mode on
[ 211]    0944: 58                                    POP AX
[ 212]        :                                       ;MOV AX,PosX
[ 213]        :                                       ;PUSH AX
[ 214]        :                                       ;MOV AX,PosY
[ 215]        :                                       ;PUSH AX
[ 216]    0945: E8 BB 01                              CALL UPDATE_INS_MEM
[ 217]    0948: E8 43 02                              CALL DISP_MEM
[ 218]        :                                       ;POP AX
[ 219]        :                                       ;MOV PosY,AX
[ 220]        :                                       ;POP AX
[ 221]        :                                       ;MOV PosX,AX
[ 222]    094B: 8B 1E 88 00                           MOV BX,PosX
[ 223]    094F: 83 FB 4F                              CMP BX,79
[ 224]    0952: 74 06                                 JE N_Line1
[ 225]    0954: FF 06 88 00                           INC PosX
[ 226]    0958: EB 0A                                 JMP INSML1
[ 227]    095A:                                       N_Line1:
[ 228]    095A: C7 06 88 00 00 00                     MOV PosX,0
[ 229]    0960: FF 06 8A 00                           INC PosY
[ 230]    0964:                                       INSML1:
[ 231]    0964: 8B 16 88 00                           MOV DX,PosX
[ 232]    0968: A1 8A 00                              MOV AX,PosY
[ 233]    096B: 8A F0                                 MOV DH,AL
[ 234]    096D: FE C6                                 INC DH
[ 235]    096F: B4 02                                 MOV AH,2 ;cursor move function
[ 236]    0971: B7 00                                 MOV BH,0
[ 237]    0973: CD 10                                 INT 10H ;move cursor
[ 238]        :                                       ;------------------ Get User input ----------------------
[ 239]    0975:                                       NEXT_KEY:
[ 240]    0975: B4 00                                 MOV AH,0 ;get keystroke function
[ 241]    0977: CD 16                                 INT 16H  ;AH=scan code, AL=ASCII code
[ 242]    0979: E9 D5 FE                              JMP WHILE_
[ 243]        :                                       
[ 244]    097C:                                       END_WHILE:
[ 245]    097C: E8 0F 02                              CALL DISP_MEM
[ 246]        :                                       ;dos Exit
[ 247]    097F:                                       EXIT_MAIN:
[ 248]        :                                       ;======================== Write Data to file ========================
[ 249]        :                                       ;set file poisiton as start of file
[ 250]    097F: B4 42                                 MOV AH,42H
[ 251]    0981: B0 00                                 MOV AL,0
[ 252]    0983: 33 C9                                 XOR CX,CX
[ 253]    0985: 33 D2                                 XOR DX,DX
[ 254]    0987: 8B 1E 8C 00                           MOV BX,handle
[ 255]    098B: CD 21                                 int 21h
[ 256]        :                                       ;DOS Service Function number 3Fh reads from a file.
[ 257]    098D: B4 40                                 mov ah,40h
[ 258]    098F: B9 40 06                              mov cx,0640H   ; CX is how many bytes to write.
[ 259]    0992: BA A7 00                              mov dx,offset text  ; DX contains address of data to write
[ 260]    0995: 8B 1E 8C 00                           mov bx,handle    ; BX needs the file handle.
[ 261]    0999: CD 21                                 int 21h   ; call DOS
[ 262]        :                                       ;CLOSE FILE (OR DATA WILL BE LOST).
[ 263]    099B: B4 3E                                 mov  ah, 3eh
[ 264]    099D: CD 21                                 int  21h
[ 265]        :                                       ;Exit the program
[ 266]    099F: B4 4C                                 MOV AH, 4CH
[ 267]    09A1: CD 21                                 INT 21H
[ 268]        :                                       MAIN ENDP
[ 269]        :                                       
[ 270]        :                                       ;==================== function key handler method ==============
[ 271]    09A3:                                       DO_FUNCTION PROC
[ 272]        :                                       ;Operates the arrow keys
[ 273]        :                                       ;input: AH=scan code
[ 274]        :                                       ;output: none
[ 275]        :                                       
[ 276]    09A3: 53                                    PUSH BX
[ 277]    09A4: 51                                    PUSH CX
[ 278]    09A5: 52                                    PUSH DX
[ 279]    09A6: 50                                    PUSH AX ;save scan code
[ 280]        :                                       ;locate  cursor
[ 281]    09A7: A1 8A 00                              MOV AX,PosY
[ 282]    09AA: 8B 16 88 00                           MOV DX,PosX
[ 283]    09AE: 8A F0                                 MOV DH,AL
[ 284]    09B0: FE C6                                 INC DH
[ 285]    09B2: 58                                    POP AX
[ 286]    09B3: A0 87 00                              MOV AL,box_flag
[ 287]        :                                       ;------------- switch ------------
[ 288]        :                                       ;case scan code of
[ 289]    09B6: 80 FC 48                              CMP AH, 48h ;up arrow?
[ 290]    09B9: 75 09                                 JNE DFS1
[ 291]    09BB: 3C 00                                 CMP AL,0
[ 292]    09BD: 75 02                                 JNE DFS11
[ 293]    09BF: EB 30                                 JMP CURSOR_UP ;yes, execute
[ 294]    09C1:                                       DFS11:
[ 295]    09C1: E9 9D 00                              JMP CURSOR_B_UP
[ 296]    09C4:                                       DFS1:
[ 297]    09C4: 80 FC 4B                              CMP AH,4Bh ;left arrow?
[ 298]    09C7: 75 09                                 JNE DFS2
[ 299]    09C9: 3C 00                                 CMP AL,0
[ 300]    09CB: 75 02                                 JNE DFS22
[ 301]    09CD: EB 44                                 JMP CURSOR_LEFT ;yes, execute
[ 302]    09CF:                                       DFS22:
[ 303]    09CF: E9 DA 00                              JMP CURSOR_B_LEFT
[ 304]    09D2:                                       DFS2:
[ 305]    09D2: 80 FC 4D                              CMP AH, 4Dh ;right arrow?
[ 306]    09D5: 75 09                                 JNE DFS3
[ 307]    09D7: 3C 00                                 CMP AL,0
[ 308]    09D9: 75 02                                 JNE DFS33
[ 309]    09DB: EB 5D                                 JMP CURSOR_RIGHT ; yes, execute
[ 310]    09DD:                                       DFS33:
[ 311]    09DD: E9 EE 00                              JMP CURSOR_B_RIGHT
[ 312]    09E0:                                       DFS3:
[ 313]    09E0: 80 FC 50                              CMP AH, 50h ;down arrow?
[ 314]    09E3: 75 09                                 JNE DFSD
[ 315]    09E5: 3C 00                                 CMP AL,0
[ 316]    09E7: 75 02                                 JNE DFSD1
[ 317]    09E9: EB 17                                 JMP CURSOR_DOWN ; yes, execute
[ 318]    09EB:                                       DFSD1:
[ 319]    09EB: E9 9A 00                              JMP CURSOR_B_DOWN
[ 320]    09EE:                                       DFSD:
[ 321]    09EE: E9 F9 00                              JMP DF_EXIT ; other function key
[ 322]        :                                       
[ 323]    09F1:                                       CURSOR_UP:
[ 324]    09F1: 80 FE 01                              CMP DH, 1  ; row 1?
[ 325]    09F4: 75 03                                 JNE GO_UP ;YES,MOV DOWN
[ 326]    09F6: E9 F1 00                              JMP DF_EXIT     ;do nothing, at first line of first page
[ 327]    09F9:                                       GO_UP:
[ 328]    09F9: FE CE                                 DEC DH ;no, row=row-1
[ 329]    09FB: FF 0E 8A 00                           DEC PosY
[ 330]    09FF: E9 E2 00                              JMP EXECUTE ;go to exceute
[ 331]        :                                       
[ 332]    0A02:                                       CURSOR_DOWN:
[ 333]    0A02: 80 FE 14                              CMP DH,20 ;last row?
[ 334]    0A05: 75 03                                 JNE  GO_DOWN ; yes, scroll up
[ 335]    0A07: E9 E0 00                              JMP DF_EXIT ;Last line of last page
[ 336]    0A0A:                                       GO_DOWN:
[ 337]    0A0A: FE C6                                 INC DH ;no, row=row+1;
[ 338]    0A0C: FF 06 8A 00                           INC PosY
[ 339]    0A10: E9 D1 00                              JMP EXECUTE ;go to execute
[ 340]        :                                       
[ 341]    0A13:                                       CURSOR_LEFT:
[ 342]    0A13: 80 FA 00                              CMP DL,0  ; column 0?
[ 343]    0A16: 75 19                                 JNE GO_LEFT ;no, move to left
[ 344]    0A18: 80 FE 01                              CMP DH,1 ;row 0?
[ 345]    0A1B: 75 03                                 JNE GO_BACK
[ 346]    0A1D: E9 CA 00                              JMP DF_EXIT
[ 347]    0A20:                                       GO_BACK:
[ 348]    0A20: FE CE                                 DEC DH ; row=row-1
[ 349]    0A22: B2 4F                                 MOV DL,79 ; last column
[ 350]    0A24: C7 06 88 00 4F 00                     MOV PosX,79
[ 351]    0A2A: FF 0E 8A 00                           DEC PosY
[ 352]    0A2E: E9 B3 00                              JMP EXECUTE ;go to execute
[ 353]        :                                       
[ 354]    0A31:                                       GO_LEFT:
[ 355]    0A31: FE CA                                 DEC DL ;col=col-1;
[ 356]    0A33: FF 0E 88 00                           DEC PosX
[ 357]    0A37: E9 AA 00                              JMP EXECUTE ;go to execute
[ 358]        :                                       
[ 359]    0A3A:                                       CURSOR_RIGHT:
[ 360]    0A3A: 80 FA 4F                              CMP DL,79
[ 361]    0A3D: 75 19                                 JNE GO_RIGHT ;no, move to right
[ 362]    0A3F: 80 FE 14                              CMP DH,20 ;last row?
[ 363]    0A42: 75 03                                 JNE GO_FARWARD
[ 364]    0A44: E9 A3 00                              JMP DF_EXIT
[ 365]    0A47:                                       GO_FARWARD:
[ 366]    0A47: FE C6                                 INC DH ;row= row+1
[ 367]    0A49: B2 00                                 MOV DL,0 ;col=0
[ 368]    0A4B: C7 06 88 00 00 00                     MOV PosX,0
[ 369]    0A51: FF 06 8A 00                           INC PosY
[ 370]    0A55: E9 8C 00                              JMP EXECUTE ;go to execute
[ 371]        :                                       
[ 372]    0A58:                                       GO_RIGHT:
[ 373]    0A58: FE C2                                 INC DL ;col=col+1
[ 374]    0A5A: FF 06 88 00                           INC PosX
[ 375]    0A5E: E9 83 00                              JMP EXECUTE ;go to execute
[ 376]        :                                       
[ 377]    0A61:                                       CURSOR_B_UP:
[ 378]    0A61: 80 FE 01                              CMP DH,1
[ 379]    0A64: 75 03                                 JNE CBUPL1
[ 380]    0A66: E9 81 00                              JMP DF_EXIT
[ 381]    0A69:                                       CBUPL1:
[ 382]    0A69: FE CE                                 DEC DH
[ 383]    0A6B: B4 02                                 MOV AH,2 ;cursor move function
[ 384]    0A6D: B7 00                                 MOV BH,0
[ 385]    0A6F: CD 10                                 INT 10H ;move cursor
[ 386]    0A71: FF 0E 8A 00                           DEC PosY
[ 387]    0A75: B0 B3                                 MOV AL,179
[ 388]    0A77: E8 74 00                              CALL UPDATE_MEM
[ 389]    0A7A: B4 02                                 MOV AH,2  ;Display character func
[ 390]    0A7C: 8A D0                                 MOV DL,AL ;get character
[ 391]    0A7E: CD 21                                 INT 21H ;Display character
[ 392]    0A80: B2 08                                 MOV DL,8
[ 393]    0A82: B4 02                                 MOV AH,2
[ 394]    0A84: CD 21                                 INT 21h
[ 395]    0A86: EB 62                                 JMP DF_EXIT
[ 396]        :                                       
[ 397]    0A88:                                       CURSOR_B_DOWN:
[ 398]    0A88: 80 FE 14                              CMP DH,20
[ 399]    0A8B: 74 5D                                 JE DF_EXIT
[ 400]    0A8D: FE C6                                 INC DH
[ 401]    0A8F: B4 02                                 MOV AH,2 ;cursor move function
[ 402]    0A91: B7 00                                 MOV BH,0
[ 403]    0A93: CD 10                                 INT 10H ;move cursor
[ 404]    0A95: FF 06 8A 00                           INC PosY
[ 405]    0A99: B0 B3                                 MOV AL,179
[ 406]    0A9B: E8 50 00                              CALL UPDATE_MEM
[ 407]    0A9E: B4 02                                 MOV AH,2  ;Display character func
[ 408]    0AA0: 8A D0                                 MOV DL,AL ;get character
[ 409]    0AA2: CD 21                                 INT 21H ;Display character
[ 410]    0AA4: B2 08                                 MOV DL,8
[ 411]    0AA6: B4 02                                 MOV AH,2
[ 412]    0AA8: CD 21                                 INT 21h
[ 413]    0AAA: EB 3E                                 JMP DF_EXIT
[ 414]        :                                       
[ 415]    0AAC:                                       CURSOR_B_LEFT:
[ 416]    0AAC: 80 FA 00                              CMP DL,0
[ 417]    0AAF: 74 39                                 JE DF_EXIT
[ 418]    0AB1: B2 08                                 MOV DL,8
[ 419]    0AB3: B4 02                                 MOV AH,2
[ 420]    0AB5: CD 21                                 INT 21H
[ 421]    0AB7: FF 0E 88 00                           DEC PosX
[ 422]    0ABB: B0 C4                                 MOV AL,196
[ 423]    0ABD: E8 2E 00                              CALL UPDATE_MEM
[ 424]    0AC0: B4 02                                 MOV AH,2  ;Display character func
[ 425]    0AC2: 8A D0                                 MOV DL,AL ;get character
[ 426]    0AC4: CD 21                                 INT 21H ;Display character
[ 427]    0AC6: B2 08                                 MOV DL,8
[ 428]    0AC8: B4 02                                 MOV AH,2
[ 429]    0ACA: CD 21                                 INT 21h
[ 430]    0ACC: EB 1C                                 JMP DF_EXIT
[ 431]        :                                       
[ 432]    0ACE:                                       CURSOR_B_RIGHT:
[ 433]    0ACE: 80 FA 4F                              CMP DL,79
[ 434]    0AD1: 74 17                                 JE DF_EXIT
[ 435]    0AD3: B0 C4                                 MOV AL,196
[ 436]    0AD5: E8 16 00                              CALL UPDATE_MEM
[ 437]    0AD8: B4 02                                 MOV AH,2  ;Display character func
[ 438]    0ADA: 8A D0                                 MOV DL,AL ;get character
[ 439]    0ADC: CD 21                                 INT 21H ;Display character
[ 440]    0ADE: FF 06 88 00                           INC PosX
[ 441]    0AE2: EB 06                                 JMP DF_EXIT
[ 442]        :                                       
[ 443]    0AE4:                                       EXECUTE:
[ 444]    0AE4: B4 02                                 MOV AH,2 ;cursor move function
[ 445]    0AE6: B7 00                                 MOV BH,0
[ 446]    0AE8: CD 10                                 INT 10H ;move cursor
[ 447]        :                                       
[ 448]    0AEA:                                       DF_EXIT:
[ 449]    0AEA: 5A                                    POP DX
[ 450]    0AEB: 59                                    POP CX
[ 451]    0AEC: 5B                                    POP BX
[ 452]    0AED: C3                                    RET
[ 453]        :                                       DO_FUNCTION ENDP
[ 454]        :                                       
[ 455]        :                                       ;=========== Method to update entered character in memory =============
[ 456]    0AEE:                                       UPDATE_MEM PROC
[ 457]        :                                       ;position of character in memory is PosX, PosY
[ 458]        :                                       ;Character in AL
[ 459]    0AEE: 50                                    PUSH AX
[ 460]    0AEF: A1 8A 00                              MOV AX,PosY
[ 461]    0AF2: BB 50 00                              MOV BX,80
[ 462]    0AF5: F7 E3                                 MUL BX
[ 463]    0AF7: 8B 1E 88 00                           MOV BX,PosX
[ 464]    0AFB: 03 D8                                 ADD BX,AX
[ 465]    0AFD: 58                                    POP AX
[ 466]    0AFE: 88 87 A7 00                           MOV text[BX],AL
[ 467]    0B02: C3                                    RET
[ 468]        :                                       UPDATE_MEM ENDP
[ 469]        :                                       
[ 470]        :                                       ;========== Method to insert entered character in memory =========
[ 471]    0B03:                                       UPDATE_INS_MEM PROC
[ 472]        :                                       ;position of character in memory is PosX,PosY
[ 473]        :                                       ;Character in AL
[ 474]    0B03: 50                                    PUSH AX
[ 475]    0B04: A1 8A 00                              MOV AX,PosY
[ 476]    0B07: BB 50 00                              MOV BX,80
[ 477]    0B0A: F7 E3                                 MUL BX
[ 478]    0B0C: 8B 1E 88 00                           MOV BX,PosX
[ 479]    0B10: 03 D8                                 ADD BX,AX
[ 480]    0B12: 53                                    PUSH BX
[ 481]    0B13: B8 40 06                              MOV AX,1600
[ 482]    0B16: 2B C3                                 SUB AX,BX
[ 483]    0B18: 8B C8                                 MOV CX,AX
[ 484]    0B1A: BB 3F 06                              MOV BX,1599
[ 485]    0B1D:                                       ML1:
[ 486]    0B1D: 4B                                    DEC BX
[ 487]    0B1E: 8A 87 A7 00                           MOV AL,text[BX]
[ 488]    0B22: 43                                    INC BX
[ 489]    0B23: 88 87 A7 00                           MOV text[BX],AL
[ 490]    0B27: 4B                                    DEC BX
[ 491]    0B28: E2 F3                                 LOOP ML1
[ 492]    0B2A: 5B                                    POP BX
[ 493]    0B2B: 58                                    POP AX
[ 494]    0B2C: 88 87 A7 00                           MOV text[BX],AL
[ 495]    0B30: C3                                    RET
[ 496]        :                                       UPDATE_INS_MEM ENDP
[ 497]        :                                       
[ 498]        :                                       ;========== Method to insert entered character in memory =========
[ 499]    0B31:                                       UPDATE_BKS_MEM PROC
[ 500]        :                                       ;position of character in memory is PosX,PosY
[ 501]        :                                       ;Character in AL
[ 502]    0B31: A1 8A 00                              MOV AX,PosY
[ 503]    0B34: BB 50 00                              MOV BX,80
[ 504]    0B37: F7 E3                                 MUL BX
[ 505]    0B39: 8B 1E 88 00                           MOV BX,PosX
[ 506]    0B3D: 03 D8                                 ADD BX,AX
[ 507]    0B3F: 53                                    PUSH BX
[ 508]    0B40: B8 40 06                              MOV AX,1600
[ 509]    0B43: 2B C3                                 SUB AX,BX
[ 510]    0B45: 8B C8                                 MOV CX,AX
[ 511]    0B47: 5B                                    POP BX
[ 512]    0B48:                                       MBL1:
[ 513]    0B48: 8A 87 A7 00                           MOV AL,text[BX]
[ 514]    0B4C: 4B                                    DEC BX
[ 515]    0B4D: 88 87 A7 00                           MOV text[BX],AL
[ 516]    0B51: 43                                    INC BX
[ 517]    0B52: 43                                    INC BX
[ 518]    0B53: E2 F3                                 LOOP MBL1
[ 519]    0B55: C3                                    RET
[ 520]        :                                       UPDATE_BKS_MEM ENDP
[ 521]        :                                       
[ 522]        :                                       ;========== Method to insert entered character in memory =========
[ 523]    0B56:                                       UPDATE_DEL_MEM PROC
[ 524]        :                                       ;position of character in memory is PosX,PosY
[ 525]        :                                       ;Character in AL
[ 526]    0B56: A1 8A 00                              MOV AX,PosY
[ 527]    0B59: BB 50 00                              MOV BX,80
[ 528]    0B5C: F7 E3                                 MUL BX
[ 529]    0B5E: 8B 1E 88 00                           MOV BX,PosX
[ 530]    0B62: 03 D8                                 ADD BX,AX
[ 531]    0B64: 53                                    PUSH BX
[ 532]    0B65: B8 40 06                              MOV AX,1600
[ 533]    0B68: 2B C3                                 SUB AX,BX
[ 534]    0B6A: 8B C8                                 MOV CX,AX
[ 535]    0B6C: 5B                                    POP BX
[ 536]    0B6D:                                       MDL1:
[ 537]    0B6D: 43                                    INC BX
[ 538]    0B6E: 8A 87 A7 00                           MOV AL,text[BX]
[ 539]    0B72: 4B                                    DEC BX
[ 540]    0B73: 88 87 A7 00                           MOV text[BX],AL
[ 541]    0B77: 43                                    INC BX
[ 542]    0B78: E2 F3                                 LOOP MDL1
[ 543]    0B7A: C3                                    RET
[ 544]        :                                       UPDATE_DEL_MEM ENDP
[ 545]        :                                       
[ 546]        :                                       ;======== GET From memory ==============================
[ 547]    0B7B:                                       GET_MEM PROC
[ 548]    0B7B: A1 8A 00                              MOV AX,PosY
[ 549]    0B7E: BB 50 00                              MOV BX,80
[ 550]    0B81: F7 E3                                 MUL BX
[ 551]    0B83: 8B 1E 88 00                           MOV BX,PosX
[ 552]    0B87: 03 D8                                 ADD BX,AX
[ 553]    0B89: 8A 97 A7 00                           MOV DL,text[BX]
[ 554]    0B8D: C3                                    RET
[ 555]        :                                       GET_MEM ENDP
[ 556]        :                                       
[ 557]        :                                       ;====== Display memory contents on screen ==============
[ 558]    0B8E:                                       DISP_MEM PROC
[ 559]    0B8E: A1 88 00                              MOV AX,PosX
[ 560]    0B91: 50                                    PUSH AX
[ 561]    0B92: A1 8A 00                              MOV AX,PosY
[ 562]    0B95: 50                                    PUSH AX
[ 563]        :                                       ;move cursor to upper left corner
[ 564]    0B96: B4 02                                 MOV AH,2h ;move cursor function.
[ 565]    0B98: B6 00                                 MOV DH,0
[ 566]    0B9A: B2 00                                 MOV DL,0
[ 567]    0B9C: B7 00                                 MOV BH,0  ;PAGE 0
[ 568]    0B9E: CD 10                                 INT 10H ;move Cursor
[ 569]    0BA0: BA 03 00                              LEA DX,title_str
[ 570]    0BA3: B4 09                                 MOV AH,09h
[ 571]    0BA5: CD 21                                 int 21H
[ 572]    0BA7: B4 02                                 MOV AH,2h ;move cursor function.
[ 573]    0BA9: B6 01                                 MOV DH,1
[ 574]    0BAB: B2 00                                 MOV DL,0
[ 575]    0BAD: B7 00                                 MOV BH,0  ;PAGE 0
[ 576]    0BAF: CD 10                                 INT 10H ;move Cursor
[ 577]        :                                       
[ 578]    0BB1: C7 06 88 00 00 00                     MOV PosX,0
[ 579]    0BB7: C7 06 8A 00 00 00                     MOV PosY,0
[ 580]    0BBD: B9 14 00                              MOV CX,20
[ 581]    0BC0:                                       dLoop1:
[ 582]    0BC0: 51                                    PUSH CX
[ 583]    0BC1: B9 50 00                              MOV CX,80
[ 584]    0BC4:                                       dLoop2:
[ 585]    0BC4: 51                                    PUSH CX
[ 586]    0BC5: E8 B3 FF                              CALL GET_MEM
[ 587]    0BC8: B4 02                                 MOV AH,2
[ 588]    0BCA: CD 21                                 INT 21H
[ 589]    0BCC: 8B 1E 88 00                           MOV BX,PosX
[ 590]    0BD0: 83 FB 4F                              CMP BX,79
[ 591]    0BD3: 74 07                                 JE dL2
[ 592]    0BD5: 43                                    INC BX
[ 593]    0BD6: 89 1E 88 00                           MOV PosX,BX
[ 594]    0BDA: EB 0A                                 JMP dL3
[ 595]    0BDC:                                       dL2:
[ 596]    0BDC: C7 06 88 00 00 00                     MOV PosX,0
[ 597]    0BE2: FF 06 8A 00                           INC PosY
[ 598]    0BE6:                                       dL3:
[ 599]    0BE6: 59                                    POP CX
[ 600]    0BE7: E2 DB                                 LOOP dLoop2
[ 601]    0BE9: 59                                    POP CX
[ 602]    0BEA: E2 D4                                 LOOP dLoop1
[ 603]    0BEC: 58                                    POP AX
[ 604]    0BED: A3 8A 00                              MOV PosY,AX
[ 605]    0BF0: 58                                    POP AX
[ 606]    0BF1: A3 88 00                              MOV PosX,AX
[ 607]        :                                       
[ 608]    0BF4: B4 02                                 MOV AH,2h ;move cursor function.
[ 609]    0BF6: B6 17                                 MOV DH,23
[ 610]    0BF8: B2 00                                 MOV DL,0
[ 611]    0BFA: B7 00                                 MOV BH,0  ;PAGE 0
[ 612]    0BFC: CD 10                                 INT 10H ;move Cursor
[ 613]    0BFE: BA 38 00                              LEA DX,bottom_str
[ 614]    0C01: B4 09                                 MOV AH,09h
[ 615]    0C03: CD 21                                 int 21H
[ 616]    0C05: C3                                    RET
[ 617]        :                                       DISP_MEM ENDP
[ 618]        :                                       
[ 619]        :                                       END MAIN
[ 620]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 06      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 08      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: C2      -   check sum (l.byte)
0013: EC      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 7F      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 7F      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
