org 100h

jmp start

; === Constants ===
rows       equ 25
cols       equ 80
bufsize    equ rows * cols

; === Memory Buffer ===
buffer     db bufsize dup(' ')   ; text buffer filled with spaces

cursor_row db 0
cursor_col db 0

start:
; Display welcome message
mov ah, 09h
mov dx, offset welcome
int 21h

; Move cursor to line 1, column 0 (below welcome message)
mov ah, 02h
mov bh, 0
mov dh, 1
mov dl, 0
int 10h

mov al, 1
mov [cursor_row], al
mov al, 0
mov [cursor_col], al

main_loop:
; Move cursor to current position
call update_cursor

; Get key (no echo)
mov ah, 00h
int 16h

cmp al, 27        ; ESC key
je exit_program

cmp al, 13        ; ENTER key
je handle_enter

cmp al, 8         ; BACKSPACE
je handle_backspace

; Save character in buffer
call get_buffer_offset
mov si, ax
mov [buffer + si], al

; Display character
mov ah, 0Eh
int 10h

; Move cursor right
mov al, [cursor_col]
inc al
cmp al, cols
jb store_col

; If at end of line, wrap
mov al, 0
mov bl, [cursor_row]
inc bl
cmp bl, rows
jb store_row
dec bl            ; stay on last line if overflow
store_row:
mov al, bl
mov [cursor_row], al
store_col:
mov [cursor_col], al
jmp main_loop

handle_enter:
mov al, 0
mov [cursor_col], al
mov al, [cursor_row]
inc al
cmp al, rows
jb set_enter_row
dec al
set_enter_row:
mov [cursor_row], al
jmp main_loop

handle_backspace:
mov al, [cursor_col]
cmp al, 0
jne not_line_start

mov al, [cursor_row]
cmp al, 1           ; don't go above welcome message
je skip_backspace
dec al
mov [cursor_row], al

; scan previous line for last char
mov cx, cols
mov al, 0
mov [cursor_col], al

find_last_char:
mov al, [cursor_col]
call get_buffer_offset
mov si, ax
cmp byte [buffer + si], ' '
jne found_char
mov al, [cursor_col]
inc al
mov [cursor_col], al
loop find_last_char

found_char:
jmp delete_char

not_line_start:
mov al, [cursor_col]
dec al
mov [cursor_col], al

delete_char:
call get_buffer_offset
mov si, ax
mov byte [buffer + si], ' '

call update_cursor
mov ah, 0Ah
mov al, ' '
int 10h
call update_cursor
jmp main_loop

skip_backspace:
jmp main_loop

exit_program:
mov ah, 4Ch
int 21h

; === Subroutines ===

update_cursor:
mov ah, 02h
mov bh, 0
mov dh, [cursor_row]
mov dl, [cursor_col]
int 10h
ret

get_buffer_offset:
mov al, [cursor_row]
mov ah, 0
mov bx, cols
mul bl              ; AX = row * cols
mov bl, [cursor_col]
add ax, bx          ; AX = row*cols + col
ret

welcome db 'Simple Text Editor (ESC=Exit, ENTER, BACKSPACE supported)$'




; [SOURCE]: C:\Users\yonas\Documents\GitHub\Simple-Text-Editor\Code.asm
