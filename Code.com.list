EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Code.com -- emu8086 assembler version: 4.08  
 
[ 5/26/2025  --  11:42:45 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       org 100h
[   2]        :                                       
[   3]    0100: E9 D2 07                              jmp start
[   4]        :                                       
[   5]        :                                       ; === Constants ===
[   6]        :                                       rows       equ 25
[   7]        :                                       cols       equ 80
[   8]        :                                       bufsize    equ rows * cols
[   9]        :                                       
[  10]        :                                       ; === Memory Buffer ===
[  11]    0103: 20 20 20 20 20 20 20 20 20 20 20 20   buffer     db bufsize dup(' ')   ; text buffer filled with spaces
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20 20 20 20 20 
                20 20 20 20 20 20 20 20             
[  12]        :                                       
[  13]    08D3: 00                                    cursor_row db 0
[  14]    08D4: 00                                    cursor_col db 0
[  15]        :                                       
[  16]    08D5:                                       start:
[  17]        :                                       ; Display welcome message
[  18]    08D5: B4 09                                 mov ah, 09h
[  19]    08D7: BA C8 09                              mov dx, offset welcome
[  20]    08DA: CD 21                                 int 21h
[  21]        :                                       
[  22]        :                                       ; Move cursor to line 1, column 0 (below welcome message)
[  23]    08DC: B4 02                                 mov ah, 02h
[  24]    08DE: B7 00                                 mov bh, 0
[  25]    08E0: B6 01                                 mov dh, 1
[  26]    08E2: B2 00                                 mov dl, 0
[  27]    08E4: CD 10                                 int 10h
[  28]        :                                       
[  29]    08E6: B0 01                                 mov al, 1
[  30]    08E8: A2 D3 08                              mov [cursor_row], al
[  31]    08EB: B0 00                                 mov al, 0
[  32]    08ED: A2 D4 08                              mov [cursor_col], al
[  33]        :                                       
[  34]    08F0:                                       main_loop:
[  35]        :                                       ; Move cursor to current position
[  36]    08F0: E8 B5 00                              call update_cursor
[  37]        :                                       
[  38]        :                                       ; Get key (no echo)
[  39]    08F3: B4 00                                 mov ah, 00h
[  40]    08F5: CD 16                                 int 16h
[  41]        :                                       
[  42]    08F7: 3C 1B                                 cmp al, 27        ; ESC key
[  43]    08F9: 75 03 E9 A6 00                        je exit_program
[  44]        :                                       
[  45]    08FE: 3C 0D                                 cmp al, 13        ; ENTER key
[  46]    0900: 74 33                                 je handle_enter
[  47]        :                                       
[  48]    0902: 3C 08                                 cmp al, 8         ; BACKSPACE
[  49]    0904: 74 44                                 je handle_backspace
[  50]        :                                       
[  51]        :                                       ; Save character in buffer
[  52]    0906: E8 AE 00                              call get_buffer_offset
[  53]    0909: 8B F0                                 mov si, ax
[  54]    090B: 88 84 03 01                           mov [buffer + si], al
[  55]        :                                       
[  56]        :                                       ; Display character
[  57]    090F: B4 0E                                 mov ah, 0Eh
[  58]    0911: CD 10                                 int 10h
[  59]        :                                       
[  60]        :                                       ; Move cursor right
[  61]    0913: A0 D4 08                              mov al, [cursor_col]
[  62]    0916: FE C0                                 inc al
[  63]    0918: 3C 50                                 cmp al, cols
[  64]    091A: 72 14                                 jb store_col
[  65]        :                                       
[  66]        :                                       ; If at end of line, wrap
[  67]    091C: B0 00                                 mov al, 0
[  68]    091E: 8A 1E D3 08                           mov bl, [cursor_row]
[  69]    0922: FE C3                                 inc bl
[  70]    0924: 80 FB 19                              cmp bl, rows
[  71]    0927: 72 02                                 jb store_row
[  72]    0929: FE CB                                 dec bl            ; stay on last line if overflow
[  73]    092B:                                       store_row:
[  74]    092B: 8A C3                                 mov al, bl
[  75]    092D: A2 D3 08                              mov [cursor_row], al
[  76]    0930:                                       store_col:
[  77]    0930: A2 D4 08                              mov [cursor_col], al
[  78]    0933: EB BB                                 jmp main_loop
[  79]        :                                       
[  80]    0935:                                       handle_enter:
[  81]    0935: B0 00                                 mov al, 0
[  82]    0937: A2 D4 08                              mov [cursor_col], al
[  83]    093A: A0 D3 08                              mov al, [cursor_row]
[  84]    093D: FE C0                                 inc al
[  85]    093F: 3C 19                                 cmp al, rows
[  86]    0941: 72 02                                 jb set_enter_row
[  87]    0943: FE C8                                 dec al
[  88]    0945:                                       set_enter_row:
[  89]    0945: A2 D3 08                              mov [cursor_row], al
[  90]    0948: EB A6                                 jmp main_loop
[  91]        :                                       
[  92]    094A:                                       handle_backspace:
[  93]    094A: A0 D4 08                              mov al, [cursor_col]
[  94]    094D: 3C 00                                 cmp al, 0
[  95]    094F: 75 2F                                 jne not_line_start
[  96]        :                                       
[  97]    0951: A0 D3 08                              mov al, [cursor_row]
[  98]    0954: 3C 01                                 cmp al, 1           ; don't go above welcome message
[  99]    0956: 74 49                                 je skip_backspace
[ 100]    0958: FE C8                                 dec al
[ 101]    095A: A2 D3 08                              mov [cursor_row], al
[ 102]        :                                       
[ 103]        :                                       ; scan previous line for last char
[ 104]    095D: B9 50 00                              mov cx, cols
[ 105]    0960: B0 00                                 mov al, 0
[ 106]    0962: A2 D4 08                              mov [cursor_col], al
[ 107]        :                                       
[ 108]    0965:                                       find_last_char:
[ 109]    0965: A0 D4 08                              mov al, [cursor_col]
[ 110]    0968: E8 4C 00                              call get_buffer_offset
[ 111]    096B: 8B F0                                 mov si, ax
[ 112]    096D: 80 BC 03 01 20                        cmp byte [buffer + si], ' '
[ 113]    0972: 75 0A                                 jne found_char
[ 114]    0974: A0 D4 08                              mov al, [cursor_col]
[ 115]    0977: FE C0                                 inc al
[ 116]    0979: A2 D4 08                              mov [cursor_col], al
[ 117]    097C: E2 E7                                 loop find_last_char
[ 118]        :                                       
[ 119]    097E:                                       found_char:
[ 120]    097E: EB 08                                 jmp delete_char
[ 121]        :                                       
[ 122]    0980:                                       not_line_start:
[ 123]    0980: A0 D4 08                              mov al, [cursor_col]
[ 124]    0983: FE C8                                 dec al
[ 125]    0985: A2 D4 08                              mov [cursor_col], al
[ 126]        :                                       
[ 127]    0988:                                       delete_char:
[ 128]    0988: E8 2C 00                              call get_buffer_offset
[ 129]    098B: 8B F0                                 mov si, ax
[ 130]    098D: C6 84 03 01 20                        mov byte [buffer + si], ' '
[ 131]        :                                       
[ 132]    0992: E8 13 00                              call update_cursor
[ 133]    0995: B4 0A                                 mov ah, 0Ah
[ 134]    0997: B0 20                                 mov al, ' '
[ 135]    0999: CD 10                                 int 10h
[ 136]    099B: E8 0A 00                              call update_cursor
[ 137]    099E: E9 4F FF                              jmp main_loop
[ 138]        :                                       
[ 139]    09A1:                                       skip_backspace:
[ 140]    09A1: E9 4C FF                              jmp main_loop
[ 141]        :                                       
[ 142]    09A4:                                       exit_program:
[ 143]    09A4: B4 4C                                 mov ah, 4Ch
[ 144]    09A6: CD 21                                 int 21h
[ 145]        :                                       
[ 146]        :                                       ; === Subroutines ===
[ 147]        :                                       
[ 148]    09A8:                                       update_cursor:
[ 149]    09A8: B4 02                                 mov ah, 02h
[ 150]    09AA: B7 00                                 mov bh, 0
[ 151]    09AC: 8A 36 D3 08                           mov dh, [cursor_row]
[ 152]    09B0: 8A 16 D4 08                           mov dl, [cursor_col]
[ 153]    09B4: CD 10                                 int 10h
[ 154]    09B6: C3                                    ret
[ 155]        :                                       
[ 156]    09B7:                                       get_buffer_offset:
[ 157]    09B7: A0 D3 08                              mov al, [cursor_row]
[ 158]    09BA: B4 00                                 mov ah, 0
[ 159]    09BC: BB 50 00                              mov bx, cols
[ 160]    09BF: F6 E3                                 mul bl              ; AX = row * cols
[ 161]    09C1: 8A 1E D4 08                           mov bl, [cursor_col]
[ 162]    09C5: 03 C3                                 add ax, bx          ; AX = row*cols + col
[ 163]    09C7: C3                                    ret
[ 164]        :                                       
[ 165]    09C8: 53 69 6D 70 6C 65 20 54 65 78 74 20   welcome db 'Simple Text Editor (ESC=Exit, ENTER, BACKSPACE supported)$'
                45 64 69 74 6F 72 20 28 45 53 43 3D 
                45 78 69 74 2C 20 45 4E 54 45 52 2C 
                20 42 41 43 4B 53 50 41 43 45 20 73 
                75 70 70 6F 72 74 65 64 29 24       
[ 166]        :                                       
[ 167]        :                                       
 
===================================================================================================
 




===================================================================================================
